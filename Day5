create database cars;
use cars;

create table user
(
	uid int primary key,
    name varchar(45) not null,
    email varchar(45) not null,
    password varchar(45) not null,
    phone varchar(45) not null,
    avatar varchar(100)  null,
    location varchar(45) check(location in ('madurai' ,'chennai'))
);

create table car
(
	cid int primary key,
    uid int,
    model varchar(45) not null,
    brand varchar(45) not null,
    mileage varchar(45) not null,
    year varchar(45) not null,
    price varchar(100)  null,
    sold varchar(45) null,
    description text null,
    image varchar(100) null,
    foreign key(cid) references user(uid)
);

CREATE TABLE service
(
    service_id INT PRIMARY KEY,
    cid INT,
    service_date DATE NOT NULL,
    service_description TEXT NOT NULL,
    cost DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (cid) REFERENCES car(cid)
);

CREATE TABLE review
(
    review_id INT PRIMARY KEY,
    cid INT,
    uid INT,
    review_date DATE NOT NULL,
    rating INT CHECK(rating >= 1 AND rating <= 5),
    comments TEXT,
    FOREIGN KEY (cid) REFERENCES car(cid),
    FOREIGN KEY (uid) REFERENCES user(uid)
);

INSERT INTO user (uid, name, email, password, phone, avatar, location) VALUES
(1, 'diensh', 'diensh@example.com', 'pa123', '987343562', 'avatar1.jpg', 'chennai'),
(2, 'ajay', 'ajay@example.com', 'pa456', '089756232364', 'avatar2.jpg', 'madurai');

INSERT INTO car (cid, uid, model, brand, mileage, year, price, sold, description, image) VALUES
(1, 1, 'Model S', 'Tesla', '15000', '2022', '80000', 'no', 'Electric car in excellent condition', 'car1.jpg'),
(2, 2, 'Civic', 'Honda', '30000', '2019', '20000', 'yes', 'Well maintained, single owner', 'car2.jpg');

INSERT INTO service (service_id, cid, service_date, service_description, cost) VALUES
(1, 1, '2023-01-15', 'Oil change and tire rotation', 100.00),
(2, 2, '2023-02-20', 'Brake pad replacement', 150.00);

INSERT INTO review (review_id, cid, uid, review_date, rating, comments) VALUES
(1, 1, 2, '2023-03-10', 5, 'Excellent car with great performance'),
(2, 2, 1, '2023-04-05', 4, 'Very reliable and fuel efficient');

ALTER TABLE car
ADD COLUMN color VARCHAR(45) NULL;

UPDATE user
SET email = 'ajay@example.com'
WHERE uid = 1;

UPDATE car
SET price = '75000'
WHERE cid = 1;

DELETE FROM user
WHERE uid = 2;

DELETE FROM car
WHERE cid = 2;

SELECT * 
FROM car
WHERE price > 100000;
  
UPDATE car
SET price = 110000, 
    last_updated = NOW()  
WHERE cid = 1;

DELETE FROM car
WHERE price < 100000;



-- Calculate the total cost of services for each car
SELECT cid, SUM(cost) AS total_service_cost
FROM service
GROUP BY cid;

--cars with a price greater than 10000 and mileage less than 20000
SELECT * 
FROM car 
WHERE price > 10000 
  AND mileage < 20000;

-- cars that are either sold or have a mileage greater than 25000
SELECT * 
FROM car 
WHERE sold = 'yes' 
   OR mileage > 25000;


UPDATE car
SET price = 75000.00, 
    last_updated = NOW()  
WHERE cid = 1;

-- Delete cars with mileage below 20000
DELETE FROM car
WHERE mileage < 20000;

-- all unique locations from the user and car tables
SELECT location FROM user
UNION
SELECT location FROM car; -- Assuming car table has a location column

-- services for specific cars
SELECT * 
FROM service 
WHERE cid IN (1, 2);

-- users whose names start with 'J'
SELECT * 
FROM user 
WHERE name LIKE 'J%';

-- average rating for each car

SELECT cid, AVG(rating) AS average_rating
FROM review
GROUP BY cid;

-- cars with an average rating greater than 4
SELECT cid, AVG(rating) AS average_rating
FROM review
GROUP BY cid
HAVING AVG(rating) > 4;




CREATE DATABASE shop;
USE shop;

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    stock INT NOT NULL,
    release_date DATE NOT NULL,
    last_updated TIMESTAMP NULL
);

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    product_id INT,
    quantity INT NOT NULL,
    order_date DATE NOT NULL,
    customer_name VARCHAR(100) NOT NULL,
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

INSERT INTO products (product_id, name, price, stock, release_date) VALUES
(1, 'Laptop', 1200.00, 150, '2022-05-10'),
(2, 'Smartphone', 800.00, 80, '2022-07-20'),
(3, 'Tablet', 600.00, 200, '2022-01-15'),
(4, 'Headphones', 150.00, 300, '2023-03-10');

INSERT INTO orders (order_id, product_id, quantity, order_date, customer_name) VALUES
(1, 1, 2, '2023-06-15', 'Ajay'),
(2, 2, 1, '2023-06-16', 'Vishal'),
(3, 3, 5, '2023-06-17', 'raghul'),
(4, 4, 10, '2023-06-18', 'Dhiyanesh');


--Calculate the total revenue of each product (price * stock)
SELECT name, price, stock, (price * stock) AS total_revenue
FROM products;

--products with a price greater than 100 and released after January 1, 2022
SELECT * 
FROM products 
WHERE price > 100 
  AND release_date > '2022-01-01';

-- products with a price between 100 and 1000 or stock less than 100
SELECT * 
FROM products 
WHERE (price BETWEEN 100 AND 1000) 
   OR stock < 100;

--Update product details and set the last_updated to the current timestamp
UPDATE products
SET price = 1100.00, 
    last_updated = NOW()  
WHERE product_id = 1;

-- Delete products with stock below 100
DELETE FROM products
WHERE stock < 100;

--  all unique customer names from orders and products
SELECT customer_name AS name FROM orders
UNION
SELECT name FROM products;

--orders for specific products
SELECT * 
FROM orders 
WHERE product_id IN (1, 3);

-- products whose names start with 'S'
SELECT * 
FROM products 
WHERE name LIKE 'S%';

-- the total quantity ordered for each product
SELECT product_id, SUM(quantity) AS total_quantity
FROM orders
GROUP BY product_id;

-- products with total quantity ordered greater than 3
SELECT product_id, SUM(quantity) AS total_quantity
FROM orders
GROUP BY product_id
HAVING SUM(quantity) > 3;
